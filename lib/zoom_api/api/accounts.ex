# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule ZoomAPI.Api.Accounts do
  @moduledoc """
  API calls for all endpoints tagged `Accounts`.
  """

  alias ZoomAPI.Connection
  import ZoomAPI.RequestBuilder

  @doc """
  Retrieve a Sub Account
  Retrieve a sub account under the master account. &lt;aside&gt;Your account must be a master account in order to retrieve sub accounts. Zoom only assigns this privilege to trusted partners.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; Scopes: &#x60;account:read:admin&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t): The account ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse200{}} on success
  {:error, info} on failure
  """
  @spec account(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse200.t()} | {:error, Tesla.Env.t()}
  def account(connection, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/accounts/#{account_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse200{})
  end

  @doc """
  Create a Sub Account
  Create a sub account under the master account. &lt;aside&gt;Your account must be a master account in order to create sub accounts. Zoom only assigns this privilege to trusted partners. Please note: the created user will not receive a confirmation email.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; Scopes: &#x60;account:write:admin&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - body (Body): Account.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse201{}} on success
  {:error, info} on failure
  """
  @spec account_create(Tesla.Env.client(), ZoomAPI.Model.Body.t(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse201.t()} | {:error, Tesla.Env.t()}
  def account_create(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/accounts")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse201{})
  end

  @doc """
  Disassociate an Account
  Disassociate a sub account from the master account. This will leave the sub account intact but it will no longer be associated with the master account.&lt;br&gt;&lt;br&gt; Scopes: &#x60;account:write:admin&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t): The account ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec account_disassociate(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def account_disassociate(connection, account_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/accounts/#{account_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve a Sub Account&#39;s Managed Domains
  Retrieve a sub account&#39;s managed domains under the master account.&lt;br&gt;&lt;br&gt; Scopes: &#x60;account:read:admin&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t): The account ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse2001{}} on success
  {:error, info} on failure
  """
  @spec account_managed_domain(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse2001.t()} | {:error, Tesla.Env.t()}
  def account_managed_domain(connection, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/accounts/#{account_id}/managed_domains")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse2001{})
  end

  @doc """
  Update a Sub Account&#39;s Options
  Update a sub account&#39;s options under the master account.&lt;br&gt;&lt;br&gt; Scopes: &#x60;account:write:admin&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t): The account ID.
  - body (Body1): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec account_options_update(Tesla.Env.client(), String.t(), ZoomAPI.Model.Body1.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def account_options_update(connection, account_id, body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/accounts/#{account_id}/options")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve a Sub Account&#39;s Settings
  Retrieve a sub account&#39;s settings under the master account.&lt;br&gt;&lt;br&gt; Scopes: &#x60;account:read:admin&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t): The account ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec account_settings(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def account_settings(connection, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/accounts/#{account_id}/settings")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Update a Sub Account&#39;s Settings
  Update a sub account&#39;s settings under the master account.&lt;br&gt;&lt;br&gt; Scopes: &#x60;account:read:admin&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t): The account ID.
  - body (AccountSettings): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec account_settings_update(
          Tesla.Env.client(),
          String.t(),
          ZoomAPI.Model.AccountSettings.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def account_settings_update(connection, account_id, body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/accounts/#{account_id}/settings")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve a sub account&#39;s trusted domains
  Retrieve a sub account&#39;s trusted domains under the master account

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t): The account ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.Object{}} on success
  {:error, info} on failure
  """
  @spec account_trusted_domain(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.Object.t()} | {:error, Tesla.Env.t()}
  def account_trusted_domain(connection, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/accounts/#{account_id}/trusted_domains")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.Object{})
  end

  @doc """
  List Sub Accounts
  List all the sub accounts under the master account.&lt;br&gt; &lt;aside&gt;Only master accounts can create and have sub accounts. Zoom only assigns this privilege to trusted partners.&lt;/aside&gt;  Scopes: &#x60;account:read:admin&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :page_size (integer()): The number of records returned within a single API call.
    - :page_number (integer()): The current page number of returned records.

  ## Returns

  {:ok, %ZoomAPI.Model.AccountList{}} on success
  {:error, info} on failure
  """
  @spec accounts(Tesla.Env.client(), keyword()) ::
          {:ok, ZoomAPI.Model.AccountList.t()} | {:error, Tesla.Env.t()}
  def accounts(connection, opts \\ []) do
    optional_params = %{
      :page_size => :query,
      :page_number => :query
    }

    %{}
    |> method(:get)
    |> url("/accounts")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.AccountList{})
  end
end
