# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule ZoomAPI.Api.Phone do
  @moduledoc """
  API calls for all endpoints tagged `Phone`.
  """

  alias ZoomAPI.Connection
  import ZoomAPI.RequestBuilder

  @doc """
  Retrieve Account&#39;s Call Logs
  Retrieve [call logs](https://support.zoom.us/hc/en-us/articles/360021114452-Viewing-Call-Logs) for an account.   **Scopes**: &#x60;phone:read:admin&#x60;&lt;br&gt; **Prerequisite:**&lt;br&gt; 1. Business or Enterprise account&lt;br&gt; 2. A Zoom Phone license&lt;br&gt; 3. Account Owner and a [role](https://support.zoom.us/hc/en-us/articles/115001078646-Role-Based-Access-Control) with Zoom Phone Management&lt;br&gt;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :page_size (integer()): The number of records returned within a single API call.
    - :page_number (integer()): The current page number of returned records.
    - :from (String.t): Start date from which you would like to get the call logs. The start date should be within past six months.
    - :to (String.t): The end date upto which you would like to get the call logs for. The end date should be within past six months.
    - :type (String.t): The type of the call logs. The value can be either \&quot;all\&quot; or \&quot;missed\&quot;.

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse20048{}} on success
  {:error, info} on failure
  """
  @spec account_call_logs(Tesla.Env.client(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse20048.t()} | {:error, Tesla.Env.t()}
  def account_call_logs(connection, opts \\ []) do
    optional_params = %{
      :page_size => :query,
      :page_number => :query,
      :from => :query,
      :to => :query,
      :type => :query
    }

    %{}
    |> method(:get)
    |> url("/phone/call_logs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse20048{})
  end

  @doc """
  Assign Calling Plan to a User
  Assign [calling plan](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-phone-calling-plans) to a [Zoom Phone](https://support.zoom.us/hc/en-us/categories/360001370051-Zoom-Phone) user.  **Scopes**: &#x60;phone:write&#x60; &#x60;phone:write:admin&#x60;&lt;br&gt; **Prerequisite:**  1. Business or Enterprise account 2. A Zoom Phone license  

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :body (Body35): 

  ## Returns

  {:ok, %ZoomAPI.Model.Object{}} on success
  {:error, info} on failure
  """
  @spec assign_calling_plan(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.Object.t()} | {:error, Tesla.Env.t()}
  def assign_calling_plan(connection, user_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/phone/users/#{user_id}/calling_plans")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.Object{})
  end

  @doc """
  Assign Phone Number to User 
  Assign a [phone number](https://support.zoom.us/hc/en-us/articles/360020808292-Managing-Phone-Numbers) to a user who has already enabled Zoom Phone.   **Scopes**: &#x60;phone:write&#x60; &#x60;phone:write:admin&#x60;&lt;br&gt; **Prerequisite:**  1. Business or Enterprise account 2. A Zoom Phone license

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :body (Body34): Provide either an id or a number in the request body.

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse20049{}} on success
  {:error, info} on failure
  """
  @spec assign_phone_number(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse20049.t()} | {:error, Tesla.Env.t()}
  def assign_phone_number(connection, user_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/phone/users/#{user_id}/phone_numbers")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse20049{})
  end

  @doc """
  Retrieve User&#39;s Profile
  Retrieve a user&#39;s [zoom phone](https://support.zoom.us/hc/en-us/articles/360001297663-Quickstart-Guide-for-Zoom-Phone-Administrators) profile.  **Scopes:** &#x60;phone:read&#x60;, &#x60;phone:read:admin&#x60;&lt;br&gt; **Prerequisites** : 1. Business or Enterprise account  2. A Zoom Phone license

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): The user ID or email address.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse20043{}} on success
  {:error, info} on failure
  """
  @spec phone_user(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse20043.t()} | {:error, Tesla.Env.t()}
  def phone_user(connection, user_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/phone/users/#{user_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse20043{})
  end

  @doc """
  Retrieve User&#39;s Call Logs
  Retrieve a [zoom phone](https://support.zoom.us/hc/en-us/articles/360001297663-Quickstart-Guide-for-Zoom-Phone-Administrators) user&#39;s call logs.  **Scopes:** &#x60;phone:read&#x60;, &#x60;phone:read:admin&#x60;&lt;br&gt; **Prerequisite:**  1. Business or Enterprise account 2. A Zoom Phone license

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): The user ID or email address.
  - from (Date.t): Start date.
  - to (Date.t): End date.
  - opts (KeywordList): [optional] Optional parameters
    - :page_size (integer()): The number of records returned within a single API call.
    - :page_number (integer()): The current page number of returned records.
    - :type (String.t): 

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse20045{}} on success
  {:error, info} on failure
  """
  @spec phone_user_call_logs(Tesla.Env.client(), String.t(), Date.t(), Date.t(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse20045.t()} | {:error, Tesla.Env.t()}
  def phone_user_call_logs(connection, user_id, from, to, opts \\ []) do
    optional_params = %{
      :page_size => :query,
      :page_number => :query,
      :type => :query
    }

    %{}
    |> method(:get)
    |> url("/phone/users/#{user_id}/call_logs")
    |> add_param(:query, :from, from)
    |> add_param(:query, :to, to)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse20045{})
  end

  @doc """
  Retrieve User&#39;s Recordings
  Retrieve a user&#39;s zoom [phone recordings](https://support.zoom.us/hc/en-us/articles/360021336671-Viewing-Call-History-and-Recordings).   **Scopes:** &#x60;phone:read&#x60;, &#x60;phone:read:admin&#x60;&lt;br&gt; **Prerequisite:** 1. Business or Enterprise account 2. A Zoom Phone license

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): The user ID or email address.
  - opts (KeywordList): [optional] Optional parameters
    - :page_size (integer()): The number of records returned within a single API call.
    - :page_number (integer()): The current page number of returned records.

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse20046{}} on success
  {:error, info} on failure
  """
  @spec phone_user_recordings(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse20046.t()} | {:error, Tesla.Env.t()}
  def phone_user_recordings(connection, user_id, opts \\ []) do
    optional_params = %{
      :page_size => :query,
      :page_number => :query
    }

    %{}
    |> method(:get)
    |> url("/phone/users/#{user_id}/recordings")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse20046{})
  end

  @doc """
  Retrieve User&#39;s Settings
  Retrieve a user&#39;s zoom phone profile [settings](https://support.zoom.us/hc/en-us/articles/360021325712-Configuring-Settings).  **Scopes:** &#x60;phone:read&#x60;, &#x60;phone:read:admin&#x60;&lt;br&gt; **Prerequisite:** 1. Business or Enterprise account 2. A Zoom Phone license

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): The user ID or email address.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse20044{}} on success
  {:error, info} on failure
  """
  @spec phone_user_settings(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse20044.t()} | {:error, Tesla.Env.t()}
  def phone_user_settings(connection, user_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/phone/users/#{user_id}/settings")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse20044{})
  end

  @doc """
  Retrieve User&#39;s Voicemails
  Retrieve a user&#39;s zoom phone voicemails.   **Scopes:** &#x60;phone:read&#x60;, &#x60;phone:read:admin&#x60;&lt;br&gt; **Prerequisite:** 1. Business or Enterprise account 2. A Zoom Phone license

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): The user ID or email address.
  - opts (KeywordList): [optional] Optional parameters
    - :page_size (integer()): The number of records returned within a single API call.
    - :page_number (integer()): The current page number of returned records.
    - :status (String.t): Status of the voice mail

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse20047{}} on success
  {:error, info} on failure
  """
  @spec phone_user_voice_mails(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse20047.t()} | {:error, Tesla.Env.t()}
  def phone_user_voice_mails(connection, user_id, opts \\ []) do
    optional_params = %{
      :page_size => :query,
      :page_number => :query,
      :status => :query
    }

    %{}
    |> method(:get)
    |> url("/phone/users/#{user_id}/voice_mails")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse20047{})
  end

  @doc """
  Retrieve Call Status
  Retrieve the call status of a user&#39;s calls.

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): The user Id of the user.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse20050{}} on success
  {:error, info} on failure
  """
  @spec retrieve_call_status(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse20050.t()} | {:error, Tesla.Env.t()}
  def retrieve_call_status(connection, user_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/phone/users/#{user_id}/online_calls")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse20050{})
  end

  @doc """
  Unassign User&#39;s Calling Plan
  Unassign a [calling plan](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-phone-calling-plans) that was previously assigned to a [Zoom Phone](https://support.zoom.us/hc/en-us/categories/360001370051) user.  **Scopes**: &#x60;phone:write&#x60; &#x60;phone:write:admin&#x60;&lt;br&gt; **Prerequisite:**  1. Business or Enterprise account 2. A Zoom Phone license

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): 
  - type (String.t): The [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-phone-calling-plans) of the calling plan that was assigned to user. (e.g: The value of type would be \&quot;200\&quot; for Unlimited US/Canada calling plan.) 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.Object{}} on success
  {:error, info} on failure
  """
  @spec unassign_calling_plan(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.Object.t()} | {:error, Tesla.Env.t()}
  def unassign_calling_plan(connection, user_id, type, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/phone/users/#{user_id}/calling_plans/#{type}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.Object{})
  end

  @doc """
  Unassign User&#39;s Phone Number
  Unassign [phone number](https://support.zoom.us/hc/en-us/articles/360020808292-Managing-Phone-Numbers#h_38ba8b01-26e3-4b1b-a9b5-0717c00a7ca6) of a Zoom phone user. &lt;br&gt;  After assigning a phone number, you can remove it if you don&#39;t want it to be assigned to anyone.  **Scopes**: &#x60;phone:write&#x60; &#x60;phone:write:admin&#x60;&lt;br&gt; **Prerequisite:**  1. Business or Enterprise account 2. A Zoom Phone license 3. User must have been previously assigned a Zoom Phone number.

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): Provide either userId or email address of the user.
  - phone_number_id (String.t): Provide either phone number or phoneNumberId of the user. 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.Object{}} on success
  {:error, info} on failure
  """
  @spec unassign_phone_number(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.Object.t()} | {:error, Tesla.Env.t()}
  def unassign_phone_number(connection, user_id, phone_number_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/phone/users/#{user_id}/phone_numbers/#{phone_number_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.Object{})
  end

  @doc """
  Update User&#39;s Profile
  Update a [Zoom Phone](https://support.zoom.us/hc/en-us/categories/360001370051-Zoom-Phone) user&#39;s profile.  **Scopes:** &#x60;phone:write&#x60; &#x60;phone:write:admin&#x60;&lt;br&gt; **Prerequisite:**  1. Business or Enterprise account 2. A Zoom Phone license

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :body (Body33): 

  ## Returns

  {:ok, %ZoomAPI.Model.Object{}} on success
  {:error, info} on failure
  """
  @spec update_user_profile(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.Object.t()} | {:error, Tesla.Env.t()}
  def update_user_profile(connection, user_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/phone/users/#{user_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.Object{})
  end
end
