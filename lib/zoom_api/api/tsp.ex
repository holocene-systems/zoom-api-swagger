# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule ZoomAPI.Api.TSP do
  @moduledoc """
  API calls for all endpoints tagged `TSP`.
  """

  alias ZoomAPI.Connection
  import ZoomAPI.RequestBuilder

  @doc """
  Retrieve account&#39;s TSP information
  Retrieve TSP information on account level&lt;br&gt;&lt;br&gt; Scopes: &#x60;tsp:read:admin&#x60; &#x60;tsp:read&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse20032{}} on success
  {:error, info} on failure
  """
  @spec tsp(Tesla.Env.client(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse20032.t()} | {:error, Tesla.Env.t()}
  def tsp(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/tsp")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse20032{})
  end

  @doc """
  Update account&#39;s TSP information
  Update TSP information on account level&lt;br&gt;&lt;br&gt; Scopes: &#x60;tsp:write:admin&#x60; &#x60;tsp:write&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - body (Body17): TSP Account
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec tsp_update(Tesla.Env.client(), ZoomAPI.Model.Body17.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def tsp_update(connection, body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/tsp")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Set the global dial-in URL for a TSP user
  A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. &lt;p&gt;&lt;/p&gt; Scopes:&#x60;tsp:write:admin&#x60; &#x60;tsp:write&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): The userId or email address of the user.
  - opts (KeywordList): [optional] Optional parameters
    - :body (TspGlobalDialInUrlSetting): Global dial-in URL of the user.

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec tsp_url_update(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def tsp_url_update(connection, user_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/users/#{user_id}/tsp/settings")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve a User&#39;s TSP Account
  Each user can have a maximum of two TSP accounts. Use this API to retrieve one specific TSP account of a user.&lt;br&gt;&lt;br&gt; Scopes: &#x60;tsp:read:admin&#x60; &#x60;tsp:read&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): The user ID or email address.
  - tsp_id (String.t): TSP account ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.TspAccount{}} on success
  {:error, info} on failure
  """
  @spec user_tsp(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.TspAccount.t()} | {:error, Tesla.Env.t()}
  def user_tsp(connection, user_id, tsp_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/tsp/#{tsp_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.TspAccount{})
  end

  @doc """
  Add a User&#39;s TSP Account
  Add a user&#39;s TSP account.&lt;br&gt;&lt;br&gt; Scopes: &#x60;tsp:write:admin&#x60; &#x60;tsp:write&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): The user ID or email address.
  - body (TspAccountsList1): TSP account.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.TspAccountsList2{}} on success
  {:error, info} on failure
  """
  @spec user_tsp_create(
          Tesla.Env.client(),
          String.t(),
          ZoomAPI.Model.TspAccountsList1.t(),
          keyword()
        ) :: {:ok, ZoomAPI.Model.TspAccountsList2.t()} | {:error, Tesla.Env.t()}
  def user_tsp_create(connection, user_id, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/users/#{user_id}/tsp")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.TspAccountsList2{})
  end

  @doc """
  Delete a User&#39;s TSP Account
  Delete a user&#39;s TSP account.&lt;br&gt;&lt;br&gt; Scopes: &#x60;tsp:write:admin&#x60; &#x60;tsp:write&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): The user ID or email address.
  - tsp_id (String.t): TSP account ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec user_tsp_delete(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def user_tsp_delete(connection, user_id, tsp_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/users/#{user_id}/tsp/#{tsp_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Update a TSP Account
  Update a user&#39;s TSP account.&lt;br&gt;&lt;br&gt; Scopes: &#x60;tsp:write:admin&#x60; &#x60;tsp:write&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): The user ID or email address.
  - tsp_id (String.t): TSP account ID.
  - body (TspAccountsList3): TSP account.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec user_tsp_update(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          ZoomAPI.Model.TspAccountsList3.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def user_tsp_update(connection, user_id, tsp_id, body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/users/#{user_id}/tsp/#{tsp_id}")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  List User&#39;s TSP accounts
  A user can have a maximum of two TSP accounts. Use this API to list all TSP accounts of a user.&lt;br&gt;&lt;br&gt; Scopes: &#x60;tsp:read:admin&#x60; &#x60;tsp:read&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): The user ID or email address.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse20036{}} on success
  {:error, info} on failure
  """
  @spec user_ts_ps(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse20036.t()} | {:error, Tesla.Env.t()}
  def user_ts_ps(connection, user_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/tsp")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse20036{})
  end
end
