# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule ZoomAPI.Api.Billing do
  @moduledoc """
  API calls for all endpoints tagged `Billing`.
  """

  alias ZoomAPI.Connection
  import ZoomAPI.RequestBuilder

  @doc """
  Retrieve Billing Information for a Sub Account
  Retrieve billing information for a sub account under a master account.&lt;br&gt;&lt;br&gt; Scopes: &#x60;billing:master&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t): The account ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse2002{}} on success
  {:error, info} on failure
  """
  @spec account_billing(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse2002.t()} | {:error, Tesla.Env.t()}
  def account_billing(connection, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/accounts/#{account_id}/billing")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse2002{})
  end

  @doc """
  Update Billing Information for a Sub Account
  Update billing information for a sub account under a master account. &lt;aside&gt; This is only for a paid sub account that is paid by a master account.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; Scopes: &#x60;billing:master&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t): The account ID.
  - body (Body2):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec account_billing_update(Tesla.Env.client(), String.t(), ZoomAPI.Model.Body2.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def account_billing_update(connection, account_id, body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/accounts/#{account_id}/billing")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Cancel  Additional Plans for a Sub Account
  Cancel additional plan for a sub account. Only a Master account holder who pays for this sub account can cancel the add-on.

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (Body37):

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec account_plan_addon_cancel(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def account_plan_addon_cancel(connection, account_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/accounts/#{account_id}/plans/addons/status")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Add an Additional Plan for a Sub Account
  Add an additional plan for a sub account. &lt;aside&gt; This can only add an Additional plan for a paid sub account that is paid by a master account. &lt;/aside&gt;&lt;br&gt;&lt;br&gt; Scopes: &#x60;billing:master&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t): The account ID.
  - body (Body5):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec account_plan_addon_create(
          Tesla.Env.client(),
          String.t(),
          ZoomAPI.Model.Body5.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def account_plan_addon_create(connection, account_id, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/accounts/#{account_id}/plans/addons")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Update an Additional Plan for a Sub Account
  Update an additional plan for a sub account.&lt;aside&gt; This can only update an additional plan for a paid sub account that is paid by a master account.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; Scopes: &#x60;billing:master&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t): The account ID.
  - body (Body4):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec account_plan_addon_update(
          Tesla.Env.client(),
          String.t(),
          ZoomAPI.Model.Body4.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def account_plan_addon_update(connection, account_id, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/accounts/#{account_id}/plans/addons")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Cancel Base Plan for a Sub Account
  Cancel a base plan for a sub account. Only a master account holder who pays for this sub account can cancel the plan.  **Scopes**: &#x60;billing:master&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t):
  - opts (KeywordList): [optional] Optional parameters
    - :body (Body36):

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec account_plan_base_delete(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def account_plan_base_delete(connection, account_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/accounts/#{account_id}/plans/base/status")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Update a Base Plan for a Sub Account
  Update a base plan for a sub account. &lt;aside&gt; This can only update a base plan for a paid sub account that is paid by a master account.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; Scopes: &#x60;billing:master&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t): The account ID.
  - body (Body3):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec account_plan_base_update(
          Tesla.Env.client(),
          String.t(),
          ZoomAPI.Model.Body3.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def account_plan_base_update(connection, account_id, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/accounts/#{account_id}/plans/base")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Subscribe Plans for a Sub Account
  Subscribe plans for a sub account of a master account. &lt;aside&gt; This can only subscribe plans for a free sub account and if paid by a master account.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; Scopes: &#x60;billing:master&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t): The account ID.
  - body (object):
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse2003{}} on success
  {:error, info} on failure
  """
  @spec account_plan_create(Tesla.Env.client(), String.t(), map, keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse2003.t()} | {:error, Tesla.Env.t()}
  def account_plan_create(connection, account_id, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/accounts/#{account_id}/plans")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse2003{})
  end

  @doc """
  Retrieve plan information for a sub account
  Retrieve plan information for a sub account under the master account.  &lt;aside&gt; This is only for a sub account that is paid by a master account.&lt;/aside&gt;&lt;br&gt;&lt;br&gt; Scopes: &#x60;billing:master&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - account_id (String.t): The account ID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse2003{}} on success
  {:error, info} on failure
  """
  @spec account_plans(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse2003.t()} | {:error, Tesla.Env.t()}
  def account_plans(connection, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/accounts/#{account_id}/plans")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse2003{})
  end
end
