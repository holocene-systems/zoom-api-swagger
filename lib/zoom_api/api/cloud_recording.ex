# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule ZoomAPI.Api.CloudRecording do
  @moduledoc """
  API calls for all endpoints tagged `CloudRecording`.
  """

  alias ZoomAPI.Connection
  import ZoomAPI.RequestBuilder

  @doc """
  Add a meeting recording registrant
  Register a participant for a meeting recording

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - meeting_id (integer()): The meeting ID.
  - body (object): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse2018{}} on success
  {:error, info} on failure
  """
  @spec meeting_recording_registrant_create(
          Tesla.Env.client(),
          integer(),
          ZoomAPI.Model.object().t,
          keyword()
        ) :: {:ok, ZoomAPI.Model.InlineResponse2018.t()} | {:error, Tesla.Env.t()}
  def meeting_recording_registrant_create(connection, meeting_id, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/meetings/#{meeting_id}/recordings/registrants")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse2018{})
  end

  @doc """
  Update a meeting recording registrant&#39;s status
  Update a meeting recording registrant&#39;s status

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - meeting_id (integer()): The meeting ID.
  - body (Body16): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec meeting_recording_registrant_status(
          Tesla.Env.client(),
          integer(),
          ZoomAPI.Model.Body16.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def meeting_recording_registrant_status(connection, meeting_id, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/meetings/#{meeting_id}/recordings/registrants/status")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  List a meeting recording&#39;s registrants
  List registrants of a meeting recording

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - meeting_id (integer()): The meeting ID.
  - opts (KeywordList): [optional] Optional parameters
    - :status (String.t): The registrant status:&lt;br&gt;&#x60;pending&#x60; - Registrant&#39;s status is pending.&lt;br&gt;&#x60;approved&#x60; - Registrant&#39;s status is approved.&lt;br&gt;&#x60;denied&#x60; - Registrant&#39;s status is denied.
    - :page_size (integer()): The number of records returned within a single API call.
    - :page_number (integer()): The current page number of returned records.

  ## Returns

  {:ok, %ZoomAPI.Model.RegistrationList1{}} on success
  {:error, info} on failure
  """
  @spec meeting_recording_registrants(Tesla.Env.client(), integer(), keyword()) ::
          {:ok, ZoomAPI.Model.RegistrationList1.t()} | {:error, Tesla.Env.t()}
  def meeting_recording_registrants(connection, meeting_id, opts \\ []) do
    optional_params = %{
      :status => :query,
      :page_size => :query,
      :page_number => :query
    }

    %{}
    |> method(:get)
    |> url("/meetings/#{meeting_id}/recordings/registrants")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.RegistrationList1{})
  end

  @doc """
  Delete Meeting Recordings
  Delete a meeting&#39;s recordings.&lt;br&gt;&lt;br&gt; Scopes: &#x60;recording:write:admin&#x60; &#x60;recording:write&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - meeting_id (String.t): The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
  - opts (KeywordList): [optional] Optional parameters
    - :action (String.t): The recording delete actions:&lt;br&gt;&#x60;trash&#x60; - Move recording to trash.&lt;br&gt;&#x60;delete&#x60; - Delete recording permanently.

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec recording_delete(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def recording_delete(connection, meeting_id, opts \\ []) do
    optional_params = %{
      :action => :query
    }

    %{}
    |> method(:delete)
    |> url("/meetings/#{meeting_id}/recordings")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Delete Meeting Recording Files
  Delete one meeting recording file.&lt;br&gt;&lt;br&gt; Scopes: &#x60;recording:write:admin&#x60; &#x60;recording:write&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - meeting_id (String.t): The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
  - recording_id (String.t): The recording ID.
  - opts (KeywordList): [optional] Optional parameters
    - :action (String.t): The recording delete actions:&lt;br&gt;&#x60;trash&#x60; - Move recording to trash.&lt;br&gt;&#x60;delete&#x60; - Delete recording permanently.

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec recording_delete_one(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def recording_delete_one(connection, meeting_id, recording_id, opts \\ []) do
    optional_params = %{
      :action => :query
    }

    %{}
    |> method(:delete)
    |> url("/meetings/#{meeting_id}/recordings/#{recording_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve All Meeting Recordings
  Retrieve all the recordings from a meeting.&lt;br&gt;&lt;br&gt; Scopes: &#x60;recording:read:admin&#x60; &#x60;recording:read&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - meeting_id (String.t): The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.Object{}} on success
  {:error, info} on failure
  """
  @spec recording_get(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.Object.t()} | {:error, Tesla.Env.t()}
  def recording_get(connection, meeting_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/meetings/#{meeting_id}/recordings")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.Object{})
  end

  @doc """
  Update a recording&#39;s registrant questions
  Update a recording&#39;s registrant questions

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - meeting_id (String.t): The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
  - body (object): Recording Registrant Questions
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec recording_registrant_question_update(
          Tesla.Env.client(),
          String.t(),
          ZoomAPI.Model.object().t,
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def recording_registrant_question_update(connection, meeting_id, body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/meetings/#{meeting_id}/recordings/registrants/questions")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve a recording&#39;s registrant questions
  Retrieve a recording&#39;s registrant questions

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - meeting_id (String.t): The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.InlineResponse20014{}} on success
  {:error, info} on failure
  """
  @spec recording_registrants_questions_get(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.InlineResponse20014.t()} | {:error, Tesla.Env.t()}
  def recording_registrants_questions_get(connection, meeting_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/meetings/#{meeting_id}/recordings/registrants/questions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.InlineResponse20014{})
  end

  @doc """
  Retrieve a meeting recording&#39;s settings
  Retrieve a meeting recording&#39;s settings&lt;br&gt;&lt;br&gt; Scopes: &#x60;recording:read:admin&#x60; &#x60;recording:read&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - meeting_id (String.t): The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.RecordingSettings{}} on success
  {:error, info} on failure
  """
  @spec recording_setting_update(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.RecordingSettings.t()} | {:error, Tesla.Env.t()}
  def recording_setting_update(connection, meeting_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/meetings/#{meeting_id}/recordings/settings")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.RecordingSettings{})
  end

  @doc """
  Update a meeting recording&#39;s settings
  Update a meeting recording&#39;s settings&lt;br&gt;&lt;br&gt; Scopes: &#x60;recording:write:admin&#x60; &#x60;recording:write&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - meeting_id (String.t): The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
  - body (RecordingSettings1): Meeting recording Settings
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec recording_settings_update(
          Tesla.Env.client(),
          String.t(),
          ZoomAPI.Model.RecordingSettings1.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def recording_settings_update(connection, meeting_id, body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/meetings/#{meeting_id}/recordings/settings")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Recover Meeting Recordings
  Recover a meeting&#39;s recordings.&lt;br&gt;&lt;br&gt; Scopes: &#x60;recording:write:admin&#x60; &#x60;recording:write&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - meeting_id (String.t): The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
  - body (Body14): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec recording_status_update(
          Tesla.Env.client(),
          String.t(),
          ZoomAPI.Model.Body14.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def recording_status_update(connection, meeting_id, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/meetings/#{meeting_id}/recordings/status")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Recover a Single Recording
  Recover a single recording.&lt;br&gt;&lt;br&gt; Scopes: &#x60;recording:write:admin&#x60; &#x60;recording:write&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - meeting_id (String.t): The meeting ID or meeting UUID. If given the meeting ID it will take the last meeting instance.
  - recording_id (String.t): The recording ID.
  - body (Body15): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec recording_status_update_one(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          ZoomAPI.Model.Body15.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def recording_status_update_one(connection, meeting_id, recording_id, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/meetings/#{meeting_id}/recordings/#{recording_id}/status")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  List All Recordings
  List all recordings.&lt;br&gt;&lt;br&gt; Scopes: &#x60;user:read:admin&#x60; &#x60;user:read&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - user_id (String.t): The user ID or email address.
  - opts (KeywordList): [optional] Optional parameters
    - :page_size (integer()): The number of records returned within a single API call.
    - :next_page_token (String.t): The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    - :mc (String.t): Query mc.
    - :trash (boolean()): Query trash.
    - :from (Date.t): Start date. (Within 6 month range)
    - :to (Date.t): End date. (Within 6 month range)

  ## Returns

  {:ok, %ZoomAPI.Model.RecordingList{}} on success
  {:error, info} on failure
  """
  @spec recordings_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.RecordingList.t()} | {:error, Tesla.Env.t()}
  def recordings_list(connection, user_id, opts \\ []) do
    optional_params = %{
      :page_size => :query,
      :next_page_token => :query,
      :mc => :query,
      :trash => :query,
      :from => :query,
      :to => :query
    }

    %{}
    |> method(:get)
    |> url("/users/#{user_id}/recordings")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.RecordingList{})
  end
end
