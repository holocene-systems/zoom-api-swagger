# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule ZoomAPI.Api.Roles do
  @moduledoc """
  API calls for all endpoints tagged `Roles`.
  """

  alias ZoomAPI.Connection
  import ZoomAPI.RequestBuilder

  @doc """
  Add members to a role
  Add a role members  Scopes: &#x60;role:write:admin&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - role_id (String.t): The role ID
  - body (AddRoleMembers): Role members
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.Object{}} on success
  {:error, info} on failure
  """
  @spec add_role_members(
          Tesla.Env.client(),
          String.t(),
          ZoomAPI.Model.AddRoleMembers.t(),
          keyword()
        ) :: {:ok, ZoomAPI.Model.Object.t()} | {:error, Tesla.Env.t()}
  def add_role_members(connection, role_id, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/roles/#{role_id}/members")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.Object{})
  end

  @doc """
  Delete a role&#39;s member
  Delete a specific member from a specific role.  Scopes: &#x60;role:write:admin&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - role_id (String.t): The role ID
  - member_id (String.t): Member&#39;s ID
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec role_member_delete(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def role_member_delete(connection, role_id, member_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/roles/#{role_id}/members/#{member_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  List members in a role
  List all the members in a specific role.  Scopes: &#x60;role:read:admin&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - role_id (String.t): The role ID
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.RoleMembersList{}} on success
  {:error, info} on failure
  """
  @spec role_members(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, ZoomAPI.Model.RoleMembersList.t()} | {:error, Tesla.Env.t()}
  def role_members(connection, role_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/roles/#{role_id}/members")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.RoleMembersList{})
  end

  @doc """
  List Roles
  List Roles on your account  Scopes: &#x60;role:read:admin&#x60;

  ## Parameters

  - connection (ZoomAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %ZoomAPI.Model.Object{}} on success
  {:error, info} on failure
  """
  @spec roles(Tesla.Env.client(), keyword()) ::
          {:ok, ZoomAPI.Model.Object.t()} | {:error, Tesla.Env.t()}
  def roles(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/roles")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%ZoomAPI.Model.Object{})
  end
end
